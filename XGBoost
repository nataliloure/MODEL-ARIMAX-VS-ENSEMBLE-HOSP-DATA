# Previsão de dados hospitalares através da técnica de ensemble XGBoost com validação cruzada k-fold

```

install.packages(c("forecast", "caret", "xgboost", "randomForest", "readxl", "modeltools", "tidyverse", "plotly", "ggplotly", "ggplot2"))

# Carregue as bibliotecas necessárias
library(forecast)
library(caret)
library(xgboost)
library(randomForest)
library(readxl)
library(modeltools)
library(stats19)
library(stats4teaching)
library(statsr)
library(ggplotify)
library(tidyverse)
library(plotly)
library(ggplot2)

caminho_do_arquivo <- ""      
dados <- read_xlsx(caminho_do_arquivo)

class(dados)
str(dados)

dados$ds <- as.Date(dados$ds, format = "%Y-%m-%d")
dados <- subset(dados, !is.na(ds) & ds >= as.Date("2012-01-01") & ds <= as.Date("2022-12-31"))
numero_de_passos_a_prever <- 12

dados_treino <- dados[1:(nrow(dados) - numero_de_passos_a_prever), ]
dados_teste <- dados[(nrow(dados) - numero_de_passos_a_prever + 1):nrow(dados), ]


# Treinamento do modelo XGBoost sem validação cruzada
set.seed(123)  # Set a seed for reproducibility
modelo_xgboost <- xgboost(
  data = as.matrix(dados_treino[, c("numero_obitos", "dias_internacao")]),
  label = dados_treino$numero_obitos,
  nrounds = 100,  # Número de rounds
  max_depth = 6,  # Profundidade máxima
  eta = 0.1,  # Taxa de aprendizado
  gamma = 1,  # Parâmetro gamma
  colsample_bytree = 0.7,  # Colunas amostradas
  min_child_weight = 5,  # Peso mínimo da folha
  subsample = 0.8,  # Subamostragem
  objective = "reg:squarederror",  # Função objetivo
  verbose = 0  # Modo silencioso
)


# Fazer previsões usando o modelo treinado
previsoes_xgboost <- predict(modelo_xgboost, newdata = as.matrix(dados_teste[, c("numero_obitos", "dias_internacao")]))



# Criar um dataframe para as previsões
df_previsoes_xgboost <- data.frame(
  ds = seq(from = max(dados$ds), by = "months", length.out = numero_de_passos_a_prever),
  previsao = previsoes_xgboost
)

# Crie o gráfico usando ggplot2
ggplot() +
  # Série temporal original
  geom_line(data = dados, aes(x = ds, y = numero_obitos), color = "black", size = 1) +
  # Linha das previsões XGBoost
  geom_line(data = df_previsoes_xgboost, aes(x = ds, y = previsao, linetype = "Previsões XGBoost"), color = "blue") +
  # Adicione rótulos e títulos
  labs(title = "Previsão de Óbitos com XGBoost",
       x = "Tempo",
       y = "Número de Óbitos") +
  # Adicione uma legenda
  scale_linetype_manual(name = "Linhas",
                        values = c("solid", "dashed"),
                        labels = c("Observações", "Previsões XGBoost")) +
  theme_minimal()

# Obter resíduos
residuos <- dados_teste$numero_obitos - previsoes_xgboost

# Gráfico de resíduos em relação às previsões
plot(previsoes_xgboost, residuos, main = "Resíduos vs. Previsões", xlab = "Previsões", ylab = "Resíduos")
abline(h = 0, col = "blue", lty = 2)

# Gráfico de autocorrelação dos resíduos
acf(residuos, main = "Autocorrelação dos Resíduos")

# Criar um dataframe para as previsões
df_previsoes_xgboost <- data.frame(
  Data = seq(from = max(dados$ds), by = "months", length.out = numero_de_passos_a_prever),
  Previsao_XGBoost = previsoes_xgboost
)

# Exibir a tabela de previsões
print(df_previsoes_xgboost)

# Calcular métricas de desempenho
mae <- mean(abs(residuos))
mape <- mean(abs(residuos / dados_teste$numero_obitos)) * 100
rmse <- sqrt(mean(residuos^2))
me <- mean(residuos)
mpe <- mean((residuos / dados_teste$numero_obitos) * 100)

# Exibir métricas de desempenho
cat("Erro Médio Absoluto (MAE):", mae, "\n")
cat("Erro Médio Percentual Absoluto (MAPE):", mape, "%\n")
cat("Erro Quadrático Médio (RMSE):", rmse, "\n")
cat("Erro Médio (ME):", me, "\n")
cat("Erro Percentual Médio (MPE):", mpe, "%\n")

# Calcular o Coeficiente de Variação (CV) dos resíduos
cv_residuos <- (sd(residuos) / mean(dados_teste$numero_obitos)) * 100
cat("Coeficiente de Variação (CV) dos Resíduos:", cv_residuos, "%\n")

# Histograma dos resíduos
hist(residuos, 
     main = "Histograma dos Resíduos",  # Título do histograma
     xlab = "Resíduos",                       # Rótulo do eixo x
     col = "lightblue",                       # Cor das barras do histograma
     border = "black",                        # Cor da borda das barras
     breaks = 20                              # Número de quebras (ajuste conforme necessário)
)

# Sumário estatístico das previsões
summary(previsoes_xgboost)

# Teste de normalidade Shapiro-Wilk
shapiro.test(residuos)

# Teste de Dickey-Fuller
adf.test(dados$numero_obitos, alternative = "stationary")
